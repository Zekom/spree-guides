h2. Tutorial: A Customization Extension

This guide contains a tutorial for the development of an extension to customize the appearance of the standard Spree installation. After reading this guide you should learn:

* How to build a "site" extension to customize the look of your store
* How to include custom stylesheets, javascript, or images
* How to deactivate the "site" extension

endprologue.

h3. Creating the Site Extension

WARNING. You must "understand the difference":boot_modes.html between running Spree as a gem and running it as a Rails application. Certain instructions below depend on how you are running Spree.

h4. Site Extension with Spree Application

First, to generate the extension, run the following to create an extension by the name of 'site'.

<shell>
script/generate extension site
</shell>

This command will create many files in the vendor/extensions/site/ directory that looks similar to a generic rails application.

h4. Site Extension with Spree Gem Install

A site extension exists upon creation of an application using the Spree gem.

<shell>
ls vendor/extensions
</shell>

h3. Add a Custom Stylesheet

This part of the tutorial explains how to add a custom stylesheet to spree to change the look of your site.

h4. Create the custom stylesheet

WARNING. Spree uses SASS and Compass, a CSS framework that includes Blueprint. We recommend you become familiar with SASS. However, you may continue this tutorial without the knowlege of SASS.

h5. SASS

To create a stylesheet with SASS, complete the following:

<shell>
mkdir -p public/stylesheets/sass
</shell>

Inside this directory, create a file named +site.sass+.  Edit +site.sass+ to contain the following:
<code>
body
  :background #99CC99
</code>

h5. CSS

To create a stylesheet without SASS, complete the following:

<shell>
mkdir public/stylesheets
</shell>

Inside this directory, create a file named +site.css+. Edit +site.css+ to contain the following:
<code>
body {
  background: #99CC99;
}
</code>

h4. Add the stylesheet to the default layout

Now you'll tell Spree to include the custom stylesheet in the default layout by overriding the stylesheets preference.

h5. SASS

If you created a +site.sass+ file, edit the +SITE_EXTENSION_DIR/site_extension.rb+ file to change the existing +activate+ method to the following:
<code>
def activate
  AppConfiguration.class_eval do
    preference :stylesheets, :string, :default => 'compiled/screen,compiled/site'
  end
end
</code>

h5. CSS

If you created a +site.css+ file, edit the +SITE_EXTENSION_DIR/site_extension.rb+ file to change the existing +activate+ method to the following:
<code>
def activate
  AppConfiguration.class_eval do
    preference :stylesheets, :string, :default => 'compiled/screen,site'
  end
end
</code>

h4. Restart server

When any extension +public/*+ files are modified, a server restart is required to copy the files over to the main app +public/+ directory.

Restart the server with the +script/server+, +touch tmp/restart.txt+, etc. command.

h4. Results

After the server has restarted, refresh your browser to verify the background colour changes have taken effect.

!images/customize1.png(Custom CSS Part 1)!

h4. Another Iteration

Complete the following steps to perform another iteration of style changes:

h5. SASS

Apply the following patch on +site.sass+:
 
<code>
  body
   :background #99CC99
+ body.two-col div#wrapper
+   :background-image none
+   :background #FFF
+   :-moz-border-radius 10px
+   :-webkit-border-radius 10px
</code>

h5. CSS

Apply the following patch on +site.css+:

<code>
  body {
    background: #99CC99; 
  }
+ body.two-col div#wrapper {
+   background-image: none;
+   background: #FFF;
+   -moz-border-radius: 10px;
+   -webkit-border-radius: 10px;
+ }
</code>

Restart the server with the +script/server+, +touch tmp/restart.txt+, etc. command.

View the results:

!images/customize2.png(Custom CSS Part 2)!

h3. Using Custom Logos

The following describes how to use a custom logo on your site.

h4. Override the default logo path

Change the default path Spree uses for the logo image file by adding the following line to the +SITE_EXTENSION_DIR/site_extension.rb+ file. Add the line below the line where you specified the stylesheets preference earlier.

<code>
    preference :logo, :string, :default => '/images/logo.png'
</code>

h4. Upload the image

Next, create a +public/images+ directory with the following command:

<shell>
mkdir public/images
</shell>

Then, retrieve "this image":images/logo.png and save it to your SITE_EXTENSION_DIR/public/images/ directory.
<shell>
wget http://spreecommerce.com/guides/images/logo.png
mv logo.png SITE_EXTENSION_DIR/public/images/logo.png
</shell>

h4. Server restart

Finally, restart the server with the +script/server+, +touch tmp/restart.txt+, etc. command to copy the public directory contents to the main rails application public/ directory.

h4. Results

View the results:

!images/customize3.png(Custom Logo)!

h3. Customizing the Layout

If you need greater layout customization than changing the logo and stylesheets allow, then override the Spree layout template.

To demonstrate we're just going to add a "Hello World" message to the layout.

h4. Copy the layout template

We'll copy the existing layout template to our site extension before we customize it.

First, complete the following command to make a new directory: 

<shell>
mkdir SITE_EXTENSION_DIR/app/views/layouts/
</shell>

h5. Spree Application Installation

If you are running Spree as an application, copy the Spree +application.html.erb+ layout file to your extension +app/views/layouts/+ directory.
 
<shell>
cp SPREE_ROOT/app/views/layouts/application.html.erb /
  SITE_EXTENSION_DIR/app/views/layouts/
</shell>

h5. Gem Installation

If you are running Spree as a gem, copy the Spree gem +application.html.erb+ layout file to your extension +app/views/layouts/+ directory.

<shell>
cp GEM_ROOT/app/views/layouts/application.html.erb /
  SITE_EXTENSION_DIR/app/views/layouts/
</shell>

h4. Edit the layout template

Edit the +SITE_EXTENSION_DIR/app/views/layouts/application.html.erb+ file to contain the following HTML between the opening +body+ tag and the first +div+ tag:
<code>
<h1>Hello World</h1>
</code>

h4. Results

Refresh the site in your browser, and see that there is now a "Hello World" message that wasn't there before.  Now go back and delete +&lt;h1&gt;Hello World&lt;/h1&gt;+ from the file you edited in the previous step, you won't need it for the rest of the tutorial.  

h3. Using Custom Javascript

This final step of the tutorial describes how to add custom javascript to your site by modifying the head partial template file.

h4. Copy the head partial

We'll copy the existing head partial template to our site extension before we customize it.

First, complete the following command to make a new directory: 

<shell>
mkdir SITE_EXTENSION_DIR/app/views/shared/
</shell>

h5. Spree Application Installation

If you are running Spree as an application, copy the Spree +_head.html.erb+ partial to your extension +app/views/shared/+ directory.
 
<shell>
cp SPREE_ROOT/app/views/shared/_head.html.erb /
  SITE_EXTENSION_DIR/app/views/shared/
</shell>

h5. Gem Installation

If you are running Spree as a gem, copy the Spree gem +_head.html.erb+ partial to your extension +app/views/shared/+ directory.

<shell>
cp GEM_ROOT/app/views/shared/_head.html.erb /
  SITE_EXTENSION_DIR/app/views/shared/
</shell>

h4. Edit the head partial

Apply the following patch to +SITE_EXTENSION_DIR/app/views/shared/_head.html.erb+ to include +site.js+ on all of your application pages. The rails helper will be used to consolidate and cache the three javascript files into one file to be included on all pages.
 
<code>
- <%= javascript_include_tag 'jquery-1.3.2.min',
-   'jquery.validate.min.js' :cache => 'jquery-and-plugins' %>
+ <%= javascript_include_tag 'jquery-1.3.2.min',
+   'jquery.validate.min.js', 'site.js'
+   :cache => 'jquery-and-site' %>
</code>

h4. Create the Javascript

WARNING. Spree endorses the use of jQuery rather than the Rails convention of Prototype. Using Prototype will most likely cause jQuery conflicts.

Create a new directory to house the javascript in the SITE_EXTENSION/public/javascripts/ directory.

<shell>
mkdir public/javascripts/
vi public/javascripts/site.js
</shell>

Add the following code to +site.js+:

<code>
$(function() {
  alert('hi');
})
</code>

h4. Server Restart

Again, restart the server to copy the +public/+ files over to the main application +public/ directory+ with +script/server+, +touch tmp/restart+, etc. command.

h4. Results

Refresh your browser to see the new alert message on page load:

!images/customize4.png(Custom Javascript Part 1)!

h4. Another Iteration

To complete another iteration of javascript changes, replace +site.js+ with the following code:

<code>
var are_you_sure = function() {
   return confirm('Are you sure you
     would like to add this item to your cart?');
};
$(function() {
   $('div#cart-form button').click(function() {
      return are_you_sure();
   });
})
</code>

Restart the server again.

Upon adding an item to the cart, you will be prompted with the following message:

!images/customize5.png(Custom Javascript Part 2)!

h3. Notes

h4. Git

<shell>
git status
</shell>

Your new site extension files will be identified as untracked files by git. These should be added to the main repository.

Additionally, the files copied over from the +SITE_EXTENSION_DIR/public/+ directory will show as untracked files by git as well. These files can be ignored or added to the main repository.

h4. Deactivation

At this point in time, to deactivate your site extension, move the +SITE_EXTENSION_DIR+ out of the +vendor/extensions+ directory.

<shell>
mv vendor/extensions/site/ ~/
</shell>
