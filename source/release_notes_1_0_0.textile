h2. Spree 1.0.0 Release Notes

endprologue.     

h3. Upgrade Notes

(TODO - polish these rough notes later)              
Remove obsolete initializers 

<shell>
rm -rf config/initializers/compass.rb
</shell>

Remove defunct contents of public dirs (unless you need something in there)

<shell>
rm -rf public/javascripts/
rm -rf public/stylesheets/
rm -rf public/images/
</shell>

<shell>
spree --update
</shell>

h4. Deprecation Warnings

DEPRECATION WARNING: require "activerecord" is deprecated and will be removed in Rails 3. Use require "active_record" instead.. (called from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/activerecord.rb:2)

Remove all instances of +require 'activerecord'+ from your +Rakefile+ (including site extensions, etc.)

h3. Improvements to Payment Gateway Configuration

This release contains significant improvements to how payment gateways are configured.  Gateways are no longer supported by database migrations, this scheme has been replaced by Active Record models that extend +Gateway+.  The configuration of gateways is now done through standard Spree +preference configuration+.  The "documentation":payment_gateways.html has also been updated and contains a more detailed explanation. 

One major improvement is that it is now possible to configure multiple gateways for each of your Rails environments.  Its also possible to use the live production server in development mode when previously, you were required to run in test mode.  One unfortunate side effect of this improvement is that your existing gateway configuration information will be lost and you will need to reconfigure your gateway in the admin interface.

INFO. You should make a note of your gateway configuration setting before upgrading since you will need to reconfigure your gateway when you're done.

This approach to implementing and configuring gateways is extremely flexible.  It makes it trivial to implement a new gateway that is already supported by Active Merchant.  There are other useful benefits to this approach that a developer may be interested in knowing.

h4. Support of Non Active Merchant Gateways

This architecture allows Spree to support gateways that are not officially supported by Active Merchant.  Many times a new gateway is donated by someone in the community but its languishing in the queue waiting for someone to test and accept the patch.  You have the option of taking that code (or writing your own from scratch) and implementing it within Spree.  Instead of delegating to an Active Merchant class, you can simply implement that functionality yourself.  You could also include the new gateway code from an Active Merchant fork inside your implementation and delegate the standard authorize, capture, etc operations to it.

h4. Ability to "Patch" Active Merchant Gateways

We've noticed that sometimes it takes a while for a crucial Active Merchant patch to be applied.  That's certainly understandable, the "Shopify":http://shopify.com guys have a business to run and its probably not a high priority for them to make sure that the latest obscure gateway patch is applied in a timely fashion.  Fortunately, the Spree approach to wrapping these gateways provides you with a convenient option.

Lets say there is a bug with the +authorize+ method.  You could simply provide an implementation of the gateway that has the patched version of the +authorize+ method and then delegates to the Active Merchant class for everything else (since that works just fine.)

h4. Additional Functionality Beyond Active Merchant

Another benefit of the architecture is that it makes it possible for Spree to provide additional common functionality that was not envisioned by Active Merchant.  Specifically, it is possible to provide an abstraction for storing credit card profiles to be used with recurring payments.  There's a good reason for Active Merchant to not care about this functionality.  Its designed for people who just want to drop a single gateway provider into their application.  Most programmers don't need three different gateways at once.  Spree is a specialized use case.  Its providing multiple gateways for you to choose from and so its desirable to have a standard method for operations such as this.

INFO. Recurring payments are not yet supported in Spree although there are plans to provide this in the near future.

h3. Seed and Sample Data in Extensions

Seed data is data that is needed by the application in order for it to work properly.  Seed data is not the same as sample data.  Instead of loading this type of data in a migration it is handled through the standard rails task through +rake db:seed+.  The rake task will first load the seed data in the spree core (ex. +db/default/countries.yml+.)  Spree will then load any fixtures found in the +db/default+ directory of your extensions.  If you wish to perform a seeding function other than simply loading fixtures, you can still do so in your extension's  +db/seeds.rb+ file.

Sample data is data that is convenient to have when testing your code.  Its loaded with the +rake db:sample+ task.  The core sample data is loaded first, followed by any fixtures contained in the +db/sample+ directory of your extensions.  

If you have fixtures in your extension with the same filename as those found in the core, they will be loaded instead of the core version.  This applies to both sample and seed fixtures.  This allows for fine grained control over the sample and seed data.  For example, you can create your own custom sample order data in your site extension instead of relying on the version provided by Spree.           

WARNING.  You should remove all +db:bootstrap+ tasks from your extensions.  The new bootstrap functionality in the core will automatically load any fixtures found in +db/sample+ of your extension.  Failing to remove this task from your extension will result in an attempt to create the fixtures twice.

h3. Miscellaneous improvements

h4. Sample Product Images in Extensions

For some time now you've been able to write sample data fixtures in extensions
that will get run when you load sample data with the +rake db:bootstrap+ task.

Now you can also add sample product image files in your extensions in the 
extensions own +lib/tasks/sample/products+ directory.  These images will be 
copied to the +public/assets/products+ directory when the sample data is loaded.

h4. Product Groups

Product groups are new feature that lets you create dynamic groupings of products, based on specified criteria, like:
* Taxonomy
* Price
* Name and/or description
* Full text search (if available)
* Product attributes (option types and properties)
* Popularity (total number of variants ever added to cart)

you can read more about them in guide: <%= guide('Product Groups', 'product_groups.html') %>

h4. Ad Hoc search urls

You can select products to be displayed with simply typing in an url!
This way on your home page you can have a set of bookmarkable and SEO friendly
urls to most important products from your store.

Example:

* http://demo.spreecommerce.com/s/keywords/stein,mug
* http://demo.spreecommerce.com/s/price_between/10,20/in_name/Rails

You can also use this search functionality within taxon:

* http://demo.spreecommerce.com/t/shirts/clothing/categories/t-shirts/s/in_name/Baseball

allowed options and full documentation can be found in <%= guide('Product Scopes', 'product_scopes.html') %>