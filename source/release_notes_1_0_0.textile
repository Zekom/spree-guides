h2. Spree 1.0.0 Release Notes

endprologue.     

h3. Upgrade Notes

(TODO - polish these rough notes later)              
Remove obsolete initializers 

<shell>
rm -rf config/initializers/compass.rb
</shell>

Remove defunct contents of public dirs (unless you need something in there)

<shell>
rm -rf public/javascripts/
rm -rf public/stylesheets/
rm -rf public/images/
</shell>

<shell>
spree --update
</shell>

h4. Deprecation Warnings

DEPRECATION WARNING: require "activerecord" is deprecated and will be removed in Rails 3. Use require "active_record" instead.. (called from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/activerecord.rb:2)

Remove all instances of +require 'activerecord'+ from your +Rakefile+ (including those contained in site extensions, etc.)

h3. Improvements to Payment Gateway Configuration

This release contains significant improvements to how payment gateways are configured.  Gateways are no longer supported by database migrations, this scheme has been replaced by Active Record models that extend +Gateway+.  The configuration of gateways is now done through standard Spree +preference configuration+.  The "documentation":payment_gateways.html has also been updated and contains a more detailed explanation. 

One major improvement is that it is now possible to configure multiple gateways for each of your Rails environments.  Its also possible to use the live production server in development mode when previously, you were required to run in test mode.  One unfortunate side effect of this improvement is that your existing gateway configuration information will be lost and you will need to reconfigure your gateway in the admin interface.

INFO. You should make a note of your gateway configuration setting before upgrading since you will need to reconfigure your gateway when you're done.

This approach to implementing and configuring gateways is extremely flexible.  It makes it trivial to implement a new gateway that is already supported by Active Merchant.  There are other useful benefits to this approach that a developer may be interested in knowing.

h4. Support of Non Active Merchant Gateways

This architecture allows Spree to support gateways that are not officially supported by Active Merchant.  Many times a new gateway is donated by someone in the community but its languishing in the queue waiting for someone to test and accept the patch.  You have the option of taking that code (or writing your own from scratch) and implementing it within Spree.  Instead of delegating to an Active Merchant class, you can simply implement that functionality yourself.  You could also include the new gateway code from an Active Merchant fork inside your implementation and delegate the standard authorize, capture, etc operations to it.

h4. Ability to "Patch" Active Merchant Gateways

We've noticed that sometimes it takes a while for a crucial Active Merchant patch to be applied.  That's certainly understandable, the "Shopify":http://shopify.com guys have a business to run and its probably not a high priority for them to make sure that the latest obscure gateway patch is applied in a timely fashion.  Fortunately, the Spree approach to wrapping these gateways provides you with a convenient option.

Lets say there is a bug with the +authorize+ method.  You could simply provide an implementation of the gateway that has the patched version of the +authorize+ method and then delegates to the Active Merchant class for everything else (since that works just fine.)

h4. Additional Functionality Beyond Active Merchant

Another benefit of the architecture is that it makes it possible for Spree to provide additional common functionality that was not envisioned by Active Merchant.  Specifically, it is possible to provide an abstraction for storing credit card profiles to be used with recurring payments.  There's a good reason for Active Merchant to not care about this functionality.  Its designed for people who just want to drop a single gateway provider into their application.  Most programmers don't need three different gateways at once.  Spree is a specialized use case.  Its providing multiple gateways for you to choose from and so its desirable to have a standard method for operations such as this.

INFO. Recurring payments are not yet supported in Spree although there are plans to provide this in the near future.

h3. Seed and Sample Data in Extensions

Seed data is data that is needed by the application in order for it to work properly.  Seed data is not the same as sample data.  Instead of loading this type of data in a migration it is handled through the standard rails task through +rake db:seed+.  The rake task will first load the seed data in the spree core (ex. +db/default/countries.yml+.)  Spree will then load any fixtures found in the +db/default+ directory of your extensions.  If you wish to perform a seeding function other than simply loading fixtures, you can still do so in your extension's  +db/seeds.rb+ file.

Sample data is data that is convenient to have when testing your code.  Its loaded with the +rake db:sample+ task.  The core sample data is loaded first, followed by any fixtures contained in the +db/sample+ directory of your extensions.  

If you have fixtures in your extension with the same filename as those found in the core, they will be loaded instead of the core version.  This applies to both sample and seed fixtures.  This allows for fine grained control over the sample and seed data.  For example, you can create your own custom sample order data in your site extension instead of relying on the version provided by Spree.           

WARNING.  You should remove all +db:bootstrap+ tasks from your extensions.  The new bootstrap functionality in the core will automatically load any fixtures found in +db/sample+ of your extension.  Failing to remove this task from your extension will result in an attempt to create the fixtures twice.       

h3. Checkout Refactoring

Numerous changes have been made to the checkout process.  This is just a brief summary of some of the highlights.  For a more complete description of the checkout process please see the "checkout documentation":checkout.html

h4. Countries Available for Shipping and Billing 

The mechanism for determining the list of billing and shipping countries has changed.  Prior to this release, there was no way to limit the billing countries and shipping countries were limited by the countries included in the shipping zones that were configured.  The new approach is to simply use all countries defined in the database by default.  

The list can be limited to a specific set of countries by configuring the new +:checkout_zone+ preference and setting its value to the name of a "zone":/zones.html containing the countries you wish to use.  This should handle most cases where the list of billing and shipping countries are the same.  You can always customize the code via extension if this does not suit your needs.

h4. State Machine

The Checkout model now has its own "state machine":http://github.com/pluginaweek/state_machine.  This allows for easier customization of the checkout process.  It is now much simpler to add or remove a step to the default checkout process.

<shell>
class SiteExtension < Spree::Extension  
  def activate
    # customize the checkout state machine
    Checkout.state_machines[:state] = StateMachine::Machine.new(Checkout, :initial => 'payment') do
      after_transition :to => 'complete', :do => :complete_order
      before_transition :to => 'complete', :do => :process_payment
      event :next do
        transition :to => 'complete', :from => 'payment'
      end
    end

    # bypass creation of address objects in the checkouts controller (prevent validation errors)
    CheckoutsController.class_eval do
      def object
        return @object if @object
        @object = parent_object.checkout
        unless params[:checkout] and params[:checkout][:coupon_code]
          @object.creditcard ||= Creditcard.new(:month => Date.today.month, :year => Date.today.year)
        end
        @object
      end
    end  
  end
end
</shell>

h4. Controller Hooks

The +CheckoutController+ now provides its own "hook mechanism" (not to be confused with theme hooks) which allow for the developer to perform additional logic (or to change the default) logic that is applied during the edit and/or update operation for a particular step.  The +Spree::Checkout::Hooks+ module provides this additional functionality and makes use of methods provided by the +resource_controller+ gem.  

The +CheckoutsController+ will automatically call an +edit_hook+ (if one is defined) before moving on to the standard edit functionality for a particular step.  There is also a corresponding +update_hook+ that can be used to execute additional functionality during an update.  Both hooks can accept either a symbol (which is the name of a method) or a block.

The +CheckoutsController+ itself makes limited use of these hooks - its expected that developers will add their own through a site extension.  Here's an example of an +edit_hook+ defined in +checkouts_controller.rb+:

<shell>
delivery.edit_hook :load_available_methods 
</shell> 

This tells the controller to call +load_available_methods+ before presenting the standard edit form for the delivery step.  The hook will be called only during the delivery step - it is ignored for all other steps.  This is necessary for the delivery step because we can't simply instantiate the +@checkout+ object and show the form.  We also need the list of available shipping methods for the specific address that is being requested.  The checkout hooks also support an alternate block syntax.  Using this syntax the same hook could have been defined as follows:

<shell>
delivery.edit_hook do
  @available_methods = rate_hash
  @checkout.shipment.shipping_method_id ||= @available_methods.first[:id]
end
</shell>

Both +edit_hook+ and +update_hook+ can be overridden entirely using either the symbol or block syntax.  What is the use case for overriding a hook?  The most obvious scenario would be to negate or remove functionality provided by the Spree core (or perhaps an extension which does almost exactly what you want.)  For instance, if you did not want to record the ip address when entering the address step.

<shell>
# negate the default edit_hook functionality for the address step
address.edit_hook {} 
</shell>

INFO. If you are skipping a step in the default checkout process the hooks will never be called for that step.  

WARNING. Be sure to check the documentation for any third party extensions you are using.  These extensions may introduce new steps or hooks and/or make assumptions about the availability of specific steps or hooks.

Perhaps more interestingly, hooks can also be appended to.  In other words, if you wanted to perform some additional logic before presenting the delivery form, you could add something like the following in your site extension.

<shell>
delivery.edit_hook << :perform_additional_logic
</shell> 

This is an argument for using the symbol approach instead of the block syntax.  It also makes it easier for extensions to work in tandem to customize the checkout process.  

Finally, you can also use the standard resource_controller hook mechanism for adding general functionality to the checkout process on edit or update.  For example:

<shell>
edit.before << :something_before_editing_every_step
</shell>

or you can also use the block syntax version

<shell>
edit.before do
  # do something useful here
end
</shell>

WARNING. Using the block syntax to replace the +resource_controller+ before hook would also have the effect of removing the custom +edit_hook+ functionality.  This is not recommended unless you are planning on creating a total custom checkout solution and you are not relying on any third party extensions to modify your checkout process.

Using the block syntax is destructive (it removes any previously defined hooks) and is suitable only in situations where you need to make drastic changes to the checkout process.

INFO. If you are writing a third party extension, be sure to also see the documentation for "adding and removing steps":checkout.html#addingor-removing-steps.  There is an extra step to ensure that any new checkout steps added by your extension are also able to handle the special +edit_hook+ and +update_hook+ calls.  This will allow developers to further customize the step from within their site extension.

h4. Checkout Partials

The default theme now contains several partials located within +vendor/extensions/theme_default/app/views/checkouts+.  Each checkout step automatically renders the +edit.html.erb+ view along with a corresponding partial based on the state associated with the current step.  For example, in the delivery step the +_delivery.html.erb+ partial is used.

h4. Javascript

Spree no longer require javascript for checkout but the user experience will be slightly more pleasing if they have javascript enabled in their browser.  Spree automatically includes the +checkout.js+ file located in the default theme.  This file can be replaced in its entirety through use of a site extension.

h3. RESTful API

[ todo ]

*Request:* 

<shell>
GET /api/orders/R664048424
</shell>

*Response:*

<shell>
{
  "order": {
    "number": "R664048424",
    "completed_at": "2010-01-11T02:07:43-05:00",
    "adjustment_total": 11.37,
    "created_at": "2010-01-11T02:07:43-05:00",
    "shipments": [
      {
        "number": "1284318100104",
        "created_at": "2010-01-11T12:07:40-05:00",
        "shipping_method": {
          "name": "UPS Ground",
          "created_at": "2010-01-11T12:07:30-05:00",
          "updated_at": "2010-01-11T12:07:30-05:00",
          "zone_id": 2,
          "id": 574015644
        },
        "shipped_at": null,
        "cost": 5.0,
        "updated_at": "2010-01-11T12:07:40-05:00",
        "tracking": null,
        "order_id": 1035625630,
        "id": 1002961742,
        "address_id": 607887544,
        "shipping_method_id": 574015644,
        "address": {
          "city": "North Serenahaven",
          "address1": "6957 Alyce Wells",
          "created_at": "2010-01-11T12:07:39-05:00",
          "address2": "Apt. 741",
          "zipcode": "16804",
          "updated_at": "2010-01-11T12:07:39-05:00",
          "country_id": 214,
          "state_name": null,
          "lastname": "Nikolaus",
          "id": 607887544,
          "phone": "502-510-7481 x3973",
          "firstname": "Vallie",
          "state_id": 889445952,
          "alternative_phone": null
        },
        "state": "pending"
      }
    ],
    "updated_at": "2010-01-11T12:07:43-05:00",
    "token": null,
    "total": 153.68,
    "item_total": 142.31,
    "id": 1035625630,
    "bill_address": {
      "city": "Goyettebury",
      "address1": "628 Eleanora Ferry",
      "created_at": "2010-01-11T12:07:39-05:00",
      "address2": "Apt. 655",
      "zipcode": "16804",
      "updated_at": "2010-01-11T12:07:39-05:00",
      "country_id": 214,
      "state_name": null,
      "lastname": "Hammes",
      "id": 1046447419,
      "phone": "1-160-338-6820",
      "firstname": "Kathlyn",
      "state_id": 889445952,
      "alternative_phone": null
    },
    "user_id": 607882993,
    "line_items": [
      {
        "price": 22.99,
        "variant": {
          "price": 22.99,
          "count_on_hand": 10,
          "product_id": 723959550,
          "is_master": true,
          "depth": null,
          "deleted_at": null,
          "cost_price": 21.0,
          "weight": null,
          "id": 504220342,
          "sku": "ROR-00012",
          "height": null,
          "width": null
        },
        "created_at": "2010-01-11T12:07:30-05:00",
        "quantity": 1,
        "updated_at": "2010-01-11T12:07:30-05:00",
        "order_id": 1035625630,
        "id": 648459260,
        "variant_id": 504220342
      },
      {
        "price": 15.99,
        "variant": {
          "price": 15.99,
          "count_on_hand": 10,
          "product_id": 459084718,
          "is_master": true,
          "depth": null,
          "deleted_at": null,
          "cost_price": 13.0,
          "weight": null,
          "id": 215054540,
          "sku": "ROR-00011",
          "height": null,
          "width": null
        },
        "created_at": "2010-01-11T12:07:30-05:00",
        "quantity": 2,
        "updated_at": "2010-01-11T12:07:30-05:00",
        "order_id": 1035625630,
        "id": 995042986,
        "variant_id": 215054540
      }
    ],
    "state": "new",
    "credit_total": 0
  }
}
</shell>


h3. Miscellaneous improvements

h4. Sample Product Images in Extensions

For some time now you've been able to write sample data fixtures in extensions
that will get run when you load sample data with the +rake db:bootstrap+ task.

Now you can also add sample product image files in your extensions in the 
extensions own +lib/tasks/sample/products+ directory.  These images will be 
copied to the +public/assets/products+ directory when the sample data is loaded.
