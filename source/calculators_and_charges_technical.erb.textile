
h2. Calculators and Adjustments

h3. Calculators

Calculators are new feature of 0.9 release. Calculators let you define way the order adjustments are calculated, use cases include calculating shipping charge based on shipping method, shipping categories, weight of items, calculating discounts based on coupon and other parameters, calculating discounts for pairs of items etc.
Calculator functionality is thightly tied to Order, Adjustment, Charge and Credit models.

h3. Adjustments

_Adjustments_ are divided into _Charges_ and _Credits_ by single table inheritance, main difference is that Credits **always** have negative amount, so in effect amount of the credit is substracted from order total, credit_total can never exceed item_total though.
There can be different sources for adjustments, in core there are following sources of adjustments:

 * **Order** - is a source of tax charge, taxation is calculated upon zones and item_total.
 * **Shipment** - is a source of shipping charge, in effect each shipment can generate shipping charge.
 * **Coupon** - is source of Credit.

Each adjustment source should provide calculator for a charge to use, but in special cases #calculate_adjustment method can be overrwriten to ignore adjustment_source's calculator (like it's in case of tax charges), it's not recomended to do that though.

h3. How calculators work

Each _Calculator_ class shares algorithm, this algorithm can compute amount of adjustment based upon:

 * **calculable** - by default this can be either _Coupon_, _ShippingMethod_, _ShippingRate_ or _TaxRate_ instance, custom calculators can be associated to any object(usuall _Order_ they are calculating adjustment for).
 * **arbitrary parameter** - passed to Caculator#compute, it *usually* is array or line_items, or scoped line_items relationship from order.
 * **preferences** - each calculator instance can hold arbitrary number of preferences defined with preference plugin, these preferences can be edited with @render "admin/shared/calculator_fields", :f => f@ 


When charge needs to be (re)calculated It calls calculator associated with it's adjustment_source (Shipment, ShippingMethod, Coupon, possibly others) and passes arbitrary parameter to calculator.

h3. How shipping charges are calculated

<%= diagram('charges_for_shipment') %>

Each _shipment_ generates exactly one shipping charge, shipping charge is calculated by Charge#calculate_shipping_charge and by default it collects all products from the order, then it groups them by shipping category, and tries to find specific shipping rate, if it's found it uses calculator associated to shipping rate to calculate delivery cost for the subset of line items, if not it uses calculator associated with shipping method, all delivery costs are then summed. If you want to change this behaviour, best way to accomplish that is by overriding that method.

h3. How tax charges are calculated

<%= diagram('taxation') %>

Order always have one tax charge, this tax charge is calculated depending on zones the user shipping address is located in.
You can change this behaviour by overidding Charge#calculate_tax_charge, Two calculators Calculator::Vat and Calculator::SalesTax are provided for your convience.

h3. How credits are calculated

<%= diagram('credits') %>

Credits in contrast to shipping and tax charges are not associated to order automatically, they are attached when user provides valid coupon code, and are calculated using standard calculators, based on Coupon that generated them and Order they are associated with. You can learn how it works by inspecting Credit#calculate_adjustment and Coupon#create_discount.

h3. Creating your own Calculators

Please inspect Calculator class, with is virtual class that all calculators should inherit from. You need to provide #compute .register and .description methods (see Calculator::FlatRate for example).

h3. Creating new type of charges

TODO
